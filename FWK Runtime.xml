<?xml version="1.0" encoding="UTF-8"?><?Siebel-Property-Set EscapeNames="true"?><Business_spcService
 Comments="DO NOT MIGRATE"
 State_spcManagement_spcType="Stateful"
 Cache="N"
 Server_spcEnabled="N"
 Display_spcName="VB Runtime"
 Inactive="N"
 Hidden="N"
 Class="CSSService"
 Name="FWK Runtime"
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="var _uslogs = [];_newline"
 Program_spcLanguage="JS"
 Name="(declarations)"
 Sequence="1"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function CleanAttributes(sAttr) {_newline    try{_newline        var tl = 0;_newline        var ta = sAttr.split(&quot;*&quot;);_newline        var t = &quot;&quot;;_newline        var tt = [];_newline        //everything before first * is the length of the next section_newline        //8*Personal6*Person0*8*Owner Id0*0*_newline        tl = parseInt(ta[0]);_newline        for (var i = 1; i &lt; ta.length; i++) {_newline            if (tl == 0) {_newline                t = &quot;&quot;;_newline            }_newline           //kudos to Henkrik T._newline           else if (ta[i].length &lt; tl) {_newline                    ta[i+1] = ta[i] + &quot;*&quot; + ta[i+1];_newline                    continue;_newline            }_newline            //end_newline            else {_newline                t = ta[i].substring(0, tl);_newline            }_newline            tl = parseInt(ta[i].substring(tl, ta[i].length));_newline            tt.push(t);_newline        }_newline    }_newline    catch(e){_newline        TheApplication().RaiseErrorText(&quot;Error in CleanAttributes: &quot; + e.toString());_newline    }_newline    return tt;_newline}"
 Program_spcLanguage="JS"
 Name="CleanAttributes"
 Sequence="6"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function EvalExpr(Inputs, Outputs) {_newline var sExpr = Inputs.GetProperty(&quot;Expr&quot;);_newline var sBC = Inputs.GetProperty(&quot;BC&quot;);_newline var sBO = Inputs.GetProperty(&quot;BO&quot;);_newline var bc;_newline var bo;_newline try {_newlineif (sBO == &quot;&quot;){_newline  bc = TheApplication().ActiveBusObject().GetBusComp(sBC);_newline}_newlineelse{_newline  bo = TheApplication().GetBusObject(sBO);_newline  bc = bo.GetBusComp(sBC);_newline}_newline  Outputs.SetProperty(&quot;Result&quot;, bc.InvokeMethod(&quot;EvalExpr&quot;, sExpr));_newline } catch (e) {_newline  Outputs.SetProperty(&quot;Result&quot;, e.toString());_newline } finally {_newline  bc = null;_newline  bo = null;_newline }_newline}_newline_newline"
 Program_spcLanguage="JS"
 Name="EvalExpr"
 Sequence="7"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function EvalScript(Inputs, Outputs) {_newline var sExpr = Inputs.GetProperty(&quot;Expr&quot;);_newline try {_newline  // reset logs_newline  _uslogs = [];_newline  _newline  // evaluate_newline  var v = eval(sExpr);_newline_newline  // return an evaluation result if log function was not used_newline  if (v &amp;&amp; _uslogs.length === 0) {_newline   log(v);_newline  }_newline } catch (e) {_newline  log(e.toString(), &quot;\nSource code:\n&quot; + sExpr);_newline } finally {_newline  Outputs.SetProperty(&quot;Result&quot;, _uslog_usprint());_newline }_newline}_newline"
 Program_spcLanguage="JS"
 Name="EvalScript"
 Sequence="8"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function FastInspect(Inputs, Outputs) {_newline    var wsname = Inputs.GetProperty(&quot;WorkspaceName&quot;);_newline    var wsver = Inputs.GetProperty(&quot;WorkspaceVersion&quot;);_newline_newline    var bo = TheApplication().GetBusObject(&quot;Workspace&quot;);_newline    var wsbc = bo.GetBusComp(&quot;Repository Workspace&quot;);_newline    var verbc = bo.GetBusComp(&quot;WSUI Workspace Versions&quot;);_newline_newline    try {_newline        wsbc.SetSearchSpec(&quot;Name&quot;,wsname);_newline        wsbc.SetViewMode(AllView);_newline        wsbc.ExecuteQuery(ForwardBackward);_newline        if (wsbc.FirstRecord()) {_newline            //verbc.SetSearchSpec(&quot;Ver Num&quot;,parseInt(wsver));_newline            verbc.SetSearchSpec(&quot;Ver Num&quot;,wsver);_newline            verbc.SetViewMode(AllView);_newline			verbc.ActivateField(&quot;Ver Num&quot;);_newline            verbc.ExecuteQuery(ForwardBackward);_newline            if(verbc.FirstRecord()){_newline                verbc.InvokeMethod(&quot;OpenWS&quot;);_newline                wsbc.InvokeMethod(&quot;PreviewWS&quot;);_newline            }_newline            else{_newline                //version not found, open/inspect latest version_newline                wsbc.InvokeMethod(&quot;OpenWS&quot;);_newline                wsbc.InvokeMethod(&quot;PreviewWS&quot;);_newline            }_newline        } _newline        else {_newline            throw(&quot;Workspace name not found: &quot; + wsname);_newline        }_newline    } _newline    catch (e) {_newline        TheApplication().RaiseErrorText(e.toString());_newline    } _newline    finally {_newline        wsbc = null;_newline        verbc = null;_newline        bo = null;_newline    }_newline}_newline"
 Program_spcLanguage="JS"
 Name="FastInspect"
 Sequence="9"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="read RR data including NEO"
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function GetRRBC (Inputs,Outputs)_newline{_newlinevar bcname = Inputs.GetProperty(&quot;Business Component&quot;);_newlinevar fieldname = Inputs.GetProperty(&quot;Field&quot;);_newlinevar sv = TheApplication().GetService(&quot;EAI Siebel Adapter&quot;);_newlinevar ips = TheApplication().NewPropertySet();_newline//var ops = TheApplication().NewPropertySet();_newlinevar ssp = &quot;&quot;;_newlineips.SetProperty(&quot;OutputIntObjectName&quot;,&quot;Base BCRM RR&quot;);_newlinessp = &quot;[BCRM RR BusComp.Name]=\&quot;&quot; + bcname + &quot;\&quot;&quot;;_newlineif (fieldname != &quot;&quot;){_newline    ssp += &quot; AND [BCRM RR Field.Name]=\&quot;&quot; + fieldname + &quot;\&quot;&quot;;_newline}_newlineips.SetProperty(&quot;SearchSpec&quot;,ssp);_newlinesv.InvokeMethod(&quot;Query&quot;,ips,Outputs);_newline_newline}_newline"
 Program_spcLanguage="JS"
 Name="GetRRBC"
 Sequence="11"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function GetRRData(Inputs, Outputs) {_newline    try{_newline        var psCache = TheApplication().NewPropertySet();_newline        var psIn = TheApplication().NewPropertySet();_newline        var psOut = TheApplication().NewPropertySet();_newline        var psDef, cpsDef;_newline        var psAttr = TheApplication().NewPropertySet();_newline        var cpsAttr = TheApplication().NewPropertySet();_newline        var cc, i;_newline        var ccc = 0;_newline        //var raw = TheApplication().NewPropertySet();_newline        psIn.SetProperty(&quot;Object Type&quot;, Inputs.GetProperty(&quot;Object Type&quot;));_newline        psIn.SetProperty(&quot;Object Name&quot;, Inputs.GetProperty(&quot;Object Name&quot;));_newline        psOut = GetRawRRData(psIn);_newline        cc = psOut.GetChildCount();_newline_newline        //root_newline        psAttr = TranslateAttr(psOut, psCache);_newline        psOut.AddChild(psAttr);_newline        //end root_newline_newline        //level 1 children_newline        if (cc &gt; 0) {_newline            for (i = 0; i &lt; cc; i++) {_newline                psAttr = TheApplication().NewPropertySet();_newline                psDef = psOut.GetChild(i);_newline                //let&apos;s ignore scripts, they cause trouble_newline                if (psDef.GetType().indexOf(&quot;Script&quot;) == -1){_newline                    ccc = psDef.GetChildCount();_newline                    psAttr = TranslateAttr(psDef, psCache);_newline                    psOut.GetChild(i).AddChild(psAttr);_newline                    //level 2 children_newline                    if (ccc &gt; 0) {_newline                        for (var k = 0; k &lt; ccc; k++) {_newline                            cpsAttr = TheApplication().NewPropertySet();_newline                            cpsDef = psDef.GetChild(k);_newline                            cpsAttr = TranslateAttr(cpsDef, psCache);_newline                            psOut.GetChild(i).GetChild(k).AddChild(cpsAttr);_newline                        }_newline                    }//end level 2 children_newline                }_newline            }_newline        }//end level 1 children_newline_newline        Outputs.AddChild(psOut);_newline    }_newline    catch(e){_newline        TheApplication().RaiseErrorText(&quot;Error in GetRRData: &quot; + e.toString());_newline    }_newline}"
 Program_spcLanguage="JS"
 Name="GetRRData"
 Sequence="12"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function GetRawRRData(Inputs) {_newline    try{_newline        var boTypeRR = TheApplication().GetBusObject(&quot;Runtime Repository Details&quot;);_newline        var bsWFUtils = TheApplication().GetService(&quot;Workflow Utilities&quot;);_newline        var psIn = TheApplication().NewPropertySet();_newline        var psOut = TheApplication().NewPropertySet();_newline        //use &quot;Type&quot; to get metameta_newline        var bcTypeRR = boTypeRR.GetBusComp(&quot;Runtime Repository &quot; + Inputs.GetProperty(&quot;Object Type&quot;));_newline        //eg. &quot;Field&quot; or &quot;Join&quot;..._newline        var sTypeRR = Inputs.GetProperty(&quot;Object Name&quot;);_newline        var sDef;_newline        bcTypeRR.ClearToQuery();_newline        bcTypeRR.ActivateField(&quot;Complied Obj Def&quot;);_newline        bcTypeRR.SetSearchExpr(&quot;[Name] LIKE \&quot;&quot; + sTypeRR + &quot;\&quot;&quot;);_newline        bcTypeRR.ExecuteQuery(ForwardOnly);_newline        if (bcTypeRR.FirstRecord()) {_newline            sDef = bcTypeRR.GetFieldValue(&quot;Complied Obj Def&quot;);_newline            psIn.SetValue(sDef);_newline            bsWFUtils.InvokeMethod(&quot;TextToPropSet&quot;, psIn, psOut);_newline        }_newline    }_newline    catch(e){_newline        TheApplication().RaiseErrorText(&quot;Error in GetRawRRData: &quot; + e.toString());_newline    }_newline    return psOut;_newline}_newline"
 Program_spcLanguage="JS"
 Name="GetRawRRData"
 Sequence="10"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function GetTypeRRFieldMap(Inputs, Outputs) {_newline    try{_newline        var psIn = TheApplication().NewPropertySet();_newline        var psOut = TheApplication().NewPropertySet();_newline        psIn.SetProperty(&quot;Object Type&quot;, &quot;Type&quot;);_newline        psIn.SetProperty(&quot;Object Name&quot;, Inputs.GetProperty(&quot;Object Type&quot;));_newline        psOut = GetRawRRData(psIn);_newline        var psDef, sAttr, arrAttr, ts;_newline        var arTypeRR = [];_newline        var arTypeNoCompRR = [];_newline        var arTypeFilteredRR = [];_newline        //kudos to Henrik T._newline        var arTypeNoExtRR = [];_newline_newline        var cc = psOut.GetChildCount();_newline        if (cc &gt; 0) {_newline            for (var i = 0; i &lt; cc; i++) {_newline                psDef = psOut.GetChild(i);_newline                sAttr = psDef.GetProperty(&quot;ATTRS&quot;);_newline                arrAttr = CleanAttributes(sAttr);_newline                for (var j = 0; j &lt; arrAttr.length; j++) {_newline                    ts = arrAttr[j];_newline_newline                    //Field name array_newline                    if (j == 3) {_newline                        arTypeRR.push(ts);_newline                    }_newline                    //array of &quot;No Compile&quot; flags_newline                    if (j == 4) {_newline                        arTypeNoCompRR.push(ts);_newline                    }_newline//array of &quot;Extension&quot; flags_newline//kudos to Henrik T._newlineif (j == 7) {_newline_newlinearTypeNoExtRR.push(ts);_newline_newline}_newline                }_newline            }_newline        }_newline/*_newline        //apply filter to get only compiled fields_newline        for (var k = 0; k &lt; arTypeNoCompRR.length; k++) {_newline            if (arTypeNoCompRR[k] == &quot;N&quot;) {_newline                arTypeFilteredRR.push(arTypeRR[k]);_newline            }_newline        }_newline*/_newline//kudos to Henrik T._newline//apply filter to get only compiled fields and no extension fields_newline_newlinefor (var k = 0; k &lt; arTypeNoCompRR.length; k++) {_newline_newline    //            if (arTypeNoCompRR[k] == &quot;N&quot;) {_newline_newline                            if (arTypeNoCompRR[k] == &quot;N&quot; &amp;&amp; arTypeNoExtRR[k] == &quot;N&quot;) {_newline_newline                                       arTypeFilteredRR.push(arTypeRR[k]);_newline_newline                       }_newline_newline}_newline        Outputs.SetProperty(&quot;RRFieldMap&quot;, arTypeFilteredRR.join(&quot;,&quot;));_newline    }_newline    catch(e){_newline        TheApplication().RaiseErrorText(&quot;Error in GetTypeRRFieldMap: &quot; + e.toString());_newline    }_newline}"
 Program_spcLanguage="JS"
 Name="GetTypeRRFieldMap"
 Sequence="13"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function InspectWS (Inputs, Outputs)_newline{_newline    var name = Inputs.GetProperty(&quot;Name&quot;);_newline    var bInspect = (Inputs.GetProperty(&quot;Inspect&quot;) == &quot;Y&quot;);_newline    var iLimit = ToNumber(Inputs.GetProperty(&quot;Limit&quot;));_newline    var res = &quot;&quot;, sWS = &quot;&quot;;_newline    _newline    var bo = TheApplication().GetBusObject(&quot;Workspace&quot;);_newline    var bc = bo.GetBusComp(&quot;Repository Workspace&quot;);_newline    var ss = &quot;&quot;;_newline    if (name == &quot;&quot;) {_newline        ss = &apos;[Created By] = LoginId () AND [Status] &lt;&gt; &quot;Delivered&quot; AND [Repository Id] = RepositoryId()&apos;;_newline    } else if (name.match(/\[.*\]/g)) {_newline        ss = name;_newline    } else {_newline        ss = &apos;[Name] like &quot;&apos; + name + &apos;&quot; AND [Repository Id] = RepositoryId()&apos;;_newline    }_newline    _newline    try {_newline        bc.SetSearchExpr(ss);_newline        bc.SetViewMode(AllView);_newline        bc.SetSortSpec(&quot;Updated(DESC)&quot;);_newline        bc.ExecuteQuery(ForwardBackward);_newline        var h = bc.FirstRecord();_newline        if (h) {_newline            if (bInspect) {_newline                bc.InvokeMethod(&quot;OpenWS&quot;);_newline                bc.InvokeMethod(&quot;PreviewWS&quot;);_newline                sWS = bc.GetFieldValue(&quot;Name&quot;);_newline            } else {_newline                var aWS = [];_newline                var i = 1;_newline                while(h &amp;&amp; i &lt;= iLimit) {_newline                     aWS.push(bc.GetFieldValue(&quot;Name&quot;));_newline                     h = bc.NextRecord();_newline                     i++;_newline                }_newline                sWS = aWS.join(&quot;,&quot;);_newline            }_newline        } else {_newline            res = &quot;No workspace found with SearchSpec: &quot; + ss;_newline        }_newline    } catch(e) {_newline        res = &quot;Error happened inspecting a workspace with SearchSpec: &quot; + ss + &quot;\n&quot; + e.toString();_newline    } finally {_newline        bc = null;_newline        bo = null;_newline    }_newline    _newline    Outputs.SetProperty(&quot;Result&quot;, res);_newline    Outputs.SetProperty(&quot;Workspaces&quot;, sWS);_newline}_newline"
 Program_spcLanguage="JS"
 Name="InspectWS"
 Sequence="14"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function InvokeServiceMethod(Inputs, Outputs)_newline{_newline // Extract service/method name params_newline var sBS = Inputs.GetProperty(&quot;Service&quot;);_newline Inputs.RemoveProperty(&quot;Service&quot;);_newline var sMethod = Inputs.GetProperty(&quot;Method&quot;);_newline Inputs.RemoveProperty(&quot;Method&quot;);_newline _newline var bs;_newline _newline try {_newline     // invoke BS_newline     bs = TheApplication().GetService(sBS);_newline     bs.InvokeMethod(sMethod, Inputs, Outputs);_newline }catch(e){_newline     throw e;_newline }finally{_newline     bs = null;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="InvokeServiceMethod"
 Sequence="15"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function ProcessLogRequest(Inputs, Outputs)_newline{_newline	/*_newline   	Created 21-Jan-2021 by Jason MacZura to allow Siebel developers to turn SQL tracing on and off, and to display_newline      the SQL trace files in the browser. _newline   */_newline	var sFilePath = Inputs.GetProperty(&quot;FilePath&quot;);_newline	if (sFilePath == &quot;&quot;) sFilePath = &quot;/siebelfs/developer/&quot;; // Log the files to a subdirectory on the Siebel File System for global access_newline_newline	var bsSvc:Service = TheApplication().GetService(&quot;EAI File Transport&quot;);_newline	var psIn:PropertySet = TheApplication().NewPropertySet();_newline	var psOut:PropertySet = TheApplication().NewPropertySet();_newline	var oTransService:Service = TheApplication().GetService(&quot;Transcode Service&quot;);_newline	var oTransOutputs:PropertySet = TheApplication().NewPropertySet();_newline_newline	try_newline	{_newline		var sOperation = Inputs.GetProperty(&quot;Operation&quot;);_newline		var strLogin = TheApplication().LoginName();_newline		var sTraceMsg = Inputs.GetProperty(&quot;TraceMsg&quot;);_newline                var sTraceType = Inputs.GetProperty(&quot;TraceType&quot;);_newline		if (sOperation == &quot;ViewLog&quot;){_newline			var strKeepFile = Inputs.GetProperty(&quot;RetainFile&quot;);_newline_newline			psIn.SetProperty(&quot;FileName&quot;, sFilePath + strLogin + &quot;.log&quot;);_newline			psIn.SetProperty(&quot;FileSleepTime&quot;, &quot;1&quot;); // No need to wait around for the file (default is 20000 ms)_newline_newline			if (strKeepFile == &quot;false&quot;) psIn.SetProperty(&quot;DeleteFile&quot;, &quot;True&quot;); // Delete the file to keep the size down_newline_newline			bsSvc.InvokeMethod(&quot;Receive&quot;, psIn, psOut); // If the file doesn&apos;t exist, Siebel throws an error._newline_newline			// The output from EAI File Transport is in binary format.  Use Transcode to convert it to text._newline			psOut.SetProperty(&quot;ConversionMode&quot;, &quot;EncodingToString&quot;);_newline			psOut.SetProperty(&quot;SourceEncoding&quot;, &quot;UTF-8&quot;);_newline			oTransService.InvokeMethod(&quot;Convert&quot;, psOut, oTransOutputs);_newline			var strContent = oTransOutputs.GetValue();_newline_newline			var myOutput = strContent;//.split(&apos;\n&apos;).join(&apos;&lt;br&gt;&apos;); // replace the newline characters with HTML &lt;br&gt; tags for display in the dialog box_newline_newline			Outputs.SetProperty(&quot;myOutput&quot;, myOutput);_newline			Outputs.SetProperty(&quot;Status&quot;, &quot;File retrieved&quot;);_newline_newline		}_newline		else if (sOperation == &quot;StartLogging&quot;)_newline		{_newline			Outputs.SetProperty(&quot;Status&quot;, &quot;Logging Started&quot;);_newline                        if (sTraceType == &quot;SQL&quot; || sTraceType == &quot;&quot;){_newline                            TheApplication().TraceOn(sFilePath + strLogin + &quot;.log&quot;, &quot;SQL&quot;, &quot;&quot;);_newline                        }_newline                        if (sTraceType == &quot;Allocation&quot;){_newline                            TheApplication().TraceOn(sFilePath + strLogin + &quot;.log&quot;, &quot;Allocation&quot;, &quot;All&quot;);_newline                        }_newline		}_newline		else if (sOperation == &quot;StopLogging&quot;)_newline		{_newline			Outputs.SetProperty(&quot;Status&quot;, &quot;Logging Stopped&quot;);_newline			TheApplication().TraceOff();_newline		}_newline		else if (sOperation == &quot;Trace&quot;){_newline			TheApplication().Trace(sTraceMsg);_newline		}_newline		else_newline		{_newline			Outputs.SetProperty(&quot;Status&quot;, &quot;Unknown Operation argument &quot; + sOperation);_newline		}_newline	}_newline	catch (e)_newline	{_newline		Outputs.SetProperty(&quot;Error&quot;,e.toString());_newline		Outputs.SetProperty(&quot;Status&quot;,&quot;Error&quot;);_newline		Outputs.SetProperty(&quot;myOutput&quot;, &quot;&quot;);_newline	}_newline	finally_newline	{_newline		oTransOutputs = null;_newline		oTransService = null;_newline		psOut = null;_newline		psIn = null;_newline		bsSvc = null;_newline	}_newline_newline}_newline"
 Program_spcLanguage="JS"
 Name="ProcessLogRequest"
 Sequence="17"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function Service_usPreInvokeMethod (MethodName, Inputs, Outputs)_newline{_newline if (MethodName == &quot;EvalExpr&quot;){_newline  EvalExpr(Inputs, Outputs);_newline }_newline if (MethodName == &quot;EvalScript&quot;){_newline  EvalScript(Inputs, Outputs);_newline }_newline if (MethodName == &quot;InvokeServiceMethod&quot;){_newline  InvokeServiceMethod(Inputs, Outputs);_newline }_newline if (MethodName == &quot;Log&quot;){_newline  AppLog(Inputs, Outputs);_newline }_newline if (MethodName == &quot;InspectWS&quot;){_newline  InspectWS (Inputs, Outputs);_newline }_newline if (MethodName == &quot;InspectWSVersion&quot;){_newline  InspectWSVersion(Inputs, Outputs);_newline }_newlineif (MethodName == &quot;FastInspect&quot;){_newline  FastInspect(Inputs, Outputs);_newline }_newlineif (MethodName == &quot;ProcessLogRequest&quot;){_newline  ProcessLogRequest(Inputs, Outputs);_newline }_newlineif (MethodName == &quot;GetRRData&quot;){_newline  GetRRData(Inputs, Outputs);_newline }_newlineif (MethodName == &quot;srvrmgr&quot;){_newline  srvrmgr(Inputs, Outputs);_newline }_newlineif (MethodName == &quot;runcmd&quot;){_newline  runcmd(Inputs, Outputs);_newline }_newlineif (MethodName == &quot;readFile&quot;){_newline  readFile(Inputs, Outputs);_newline }_newlineif (MethodName == &quot;GetRRBC&quot;){_newline  GetRRBC(Inputs,Outputs);_newline}_newline return (CancelOperation);_newline}"
 Program_spcLanguage="JS"
 Name="Service_usPreInvokeMethod"
 Sequence="22"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function TranslateAttr(Inputs, psCache) {_newline    try{_newline        var psFilter = TheApplication().NewPropertySet();_newline        var psIn = TheApplication().NewPropertySet();_newline        var psAttr = TheApplication().NewPropertySet();_newline        var psDef = Inputs;_newline        var otype = &quot;&quot;;_newline        var sAttr = psDef.GetProperty(&quot;ATTRS&quot;);_newline        var arrAttr = CleanAttributes(sAttr);_newline        var rrfmap = &quot;&quot;;_newline        var arTypeFilteredRR;_newline        var ts;_newline        var fv = &quot;&quot;;_newline_newline        otype = psDef.GetType();_newline        if (psCache.GetProperty(otype) == &quot;&quot;) {_newline            psIn.SetProperty(&quot;Object Type&quot;, otype);_newline            GetTypeRRFieldMap(psIn, psFilter);_newline            rrfmap = psFilter.GetProperty(&quot;RRFieldMap&quot;);_newline            psCache.SetProperty(otype, rrfmap);_newline        }_newline        else {_newline            rrfmap = psCache.GetProperty(otype);_newline        }_newline_newline        arTypeFilteredRR = rrfmap.split(&quot;,&quot;);_newline_newline        for (var h = 0; h &lt; arrAttr.length; h++) {_newline            ts = arrAttr[h];_newline            fv = arTypeFilteredRR[h];_newline            psAttr.SetProperty(fv, ts);_newline        }_newline        psAttr.SetType(&quot;Properties&quot;);_newline    }_newline    catch(e){_newline        TheApplication().RaiseErrorText(&quot;Error in TranslateAttr: &quot; + e.toString() + &quot;otype: &quot; + otype + &quot;***rrfmap: &quot; + rrfmap + &quot;***fv: &quot; + fv);_newline    }_newline    return psAttr;_newline}"
 Program_spcLanguage="JS"
 Name="TranslateAttr"
 Sequence="21"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function _uslog_usobj(o, s) {_newline var res = &apos;&apos;;_newline s = (&apos;undefined&apos; === typeof s? &apos;&apos; : s);_newline /* traditional representation */_newline res += s + o;_newline s += &apos;\t&apos;;_newline /* and also all available keys */_newline for (var k in o) {_newline  try{_newline   var v = o[k];_newline   if (typeof v === &quot;object&quot;){_newline    res += String.fromCharCode(10) + _uslog_usobj(v, s);_newline   } else {_newline    res += String.fromCharCode(10) + s + k + &apos; = &apos; + v;_newline   }_newline  }catch(e){_newline   res += String.fromCharCode(10) + s + k + &apos; = &apos; + e.toString();_newline  }_newline }_newline return res;_newline}"
 Program_spcLanguage="JS"
 Name="_uslog_usobj"
 Sequence="2"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function _uslog_usone(o){_newline var val = &apos;&apos;;_newline if (&apos;object&apos; === typeof o){ _newline  if(&apos;function&apos; == typeof o.toString &amp;&amp; o.toString() === &apos;[object PropertySet]&apos;) {_newline   val = String.fromCharCode(10) + _uslog_usps(o, &apos;\t&apos;);_newline  }else{_newline   val = String.fromCharCode(10) + _uslog_usobj(o, &apos;\t&apos;);_newline  }_newline } else {_newline  val = o;_newline }_newline return val;_newline}"
 Program_spcLanguage="JS"
 Name="_uslog_usone"
 Sequence="3"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function _uslog_usprint() {_newline return _uslogs.join(String.fromCharCode(13));_newline}"
 Program_spcLanguage="JS"
 Name="_uslog_usprint"
 Sequence="4"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function _uslog_usps(o, s) {_newline var res = &apos;&apos;;_newline s = (&apos;undefined&apos; === typeof s ? &apos;&apos; : s);_newline /* type */_newline res += s + (o.GetType() ? o.GetType() : &apos;PropertySet&apos;);_newline /* value */_newline res += o.GetValue() ? &apos; = &apos; + o.GetValue() : &apos;&apos;;_newline s += &apos;\t&apos;;_newline /* properties */_newline var p = o.GetFirstProperty();_newline while (p) {_newline  res += String.fromCharCode(10) + s + p + &apos; = &apos; + o.GetProperty(p);_newline  p = o.GetNextProperty();_newline }_newline /* children */_newline for (var i = 0; i &lt; o.GetChildCount(); i++) {_newline  res += String.fromCharCode(10) + _uslog_usps(o.GetChild(i), s);_newline }_newline return res;_newline}_newline_newline"
 Program_spcLanguage="JS"
 Name="_uslog_usps"
 Sequence="5"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function log() {_newline var res = [];_newline var d = new Date();_newline var sd = d.toString();_newline res.push(sd.substr(sd.length-9, 8) + &apos;:&apos; + d.getMilliseconds());_newline for (var i = 0; i &lt; arguments.length; i++) {_newline  res.push(_uslog_usone(arguments[i]));_newline }_newline _uslogs.push(res.join(&apos;\t|\t&apos;));_newline}"
 Program_spcLanguage="JS"
 Name="log"
 Sequence="16"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function readFile (Inputs,Outputs)_newline{_newlinevar fn = Inputs.GetProperty(&quot;FileName&quot;);_newlinevar st = Inputs.GetProperty(&quot;FileSleepTime&quot;);_newlineif (st == &quot;&quot;){ st = &quot;5000&quot;; }_newlinevar fs = TheApplication().GetService(&quot;EAI File Transport&quot;);_newlinevar fi = TheApplication().NewPropertySet();_newlinevar fo = TheApplication().NewPropertySet();_newlinefi.SetProperty(&quot;FileName&quot;,fn);_newlinefi.SetProperty(&quot;FileSleepTime&quot;,st);_newlinefs.InvokeMethod(&quot;Receive&quot;,fi,fo);_newline//convert output_newlinevar ts = TheApplication().GetService(&quot;Transcode Service&quot;);_newlinevar tso = TheApplication().NewPropertySet();_newlinefo.SetProperty(&quot;ConversionMode&quot;, &quot;EncodingToString&quot;);_newlinefo.SetProperty(&quot;SourceEncoding&quot;, &quot;UTF-8&quot;);_newlinets.InvokeMethod(&quot;Convert&quot;, fo, tso);_newlineOutputs.SetValue(tso.GetValue());_newline}_newline"
 Program_spcLanguage="JS"
 Name="readFile"
 Sequence="18"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function runcmd (Inputs, Outputs)_newline{_newline   var cmd = Inputs.GetProperty(&quot;cmd&quot;);_newline   Clib.system(cmd);_newline}_newline"
 Program_spcLanguage="JS"
 Name="runcmd"
 Sequence="19"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-35MB"
 Parent_spcName="FWK Runtime"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function srvrmgr (Inputs,Outputs)_newline{_newlinevar ts = new Date;_newlinevar tsm = ts.toSystem().toString();_newlinevar ln = TheApplication().LoginName();_newlinevar pa = Inputs.GetProperty(&quot;FilePath&quot;);_newlineif (pa == &quot;&quot;){_newline	pa = &quot;C:\\Siebel\\ses\\siebsrvr\\TEMP\\&quot;;_newline}_newlinevar st = Inputs.GetProperty(&quot;FileSleepTime&quot;);_newlineif (st == &quot;&quot;){_newline	st = &quot;5000&quot;;_newline}_newlinevar fn = pa + &quot;srvrmgr_usinput.txt&quot;;_newlinevar sf = pa + ln + &quot;_us&quot; + tsm + &quot;_ussrvrmgr_usspool.txt&quot;;_newlinevar cmd = Inputs.GetProperty(&quot;cmd&quot;);_newline_newlinevar fs = TheApplication().GetService(&quot;EAI File Transport&quot;);_newlinevar svc = TheApplication().GetService(&quot;BCRM Server Manager Service&quot;);_newlinevar ts = TheApplication().GetService(&quot;Transcode Service&quot;);_newline_newline//write input file_newlinevar fi = TheApplication().NewPropertySet();_newlinevar fo = TheApplication().NewPropertySet();_newlinefi.SetProperty(&quot;FileName&quot;,fn);_newlinecmd = &quot;spool &quot; + sf + &quot;\n&quot; + cmd + &quot;\n&quot; + &quot;spool off&quot; + &quot;\n&quot; + &quot;exit&quot;;_newlinefi.SetValue(cmd);_newlinefs.InvokeMethod(&quot;Send&quot;,fi,fo);_newline_newline//run srvrmgr command_newlinevar ips = TheApplication().NewPropertySet();_newline//ips.SetProperty(&quot;migrationid&quot;,&quot;TEST1&quot;);_newlinevar ops = TheApplication().NewPropertySet();_newlinesvc.InvokeMethod(&quot;Export&quot;, ips, ops);_newline_newline//retrieve spool file_newlinefi.Reset();_newlinefi.SetProperty(&quot;FileSleepTime&quot;, st);_newlinefi.SetProperty(&quot;FileName&quot;,sf);_newlinefi.SetProperty(&quot;DeleteFile&quot;,&quot;true&quot;);_newlinefs.InvokeMethod(&quot;Receive&quot;,fi,fo);_newline_newline//convert output_newlinevar tso = TheApplication().NewPropertySet();_newlinefo.SetProperty(&quot;ConversionMode&quot;, &quot;EncodingToString&quot;);_newlinefo.SetProperty(&quot;SourceEncoding&quot;, &quot;UTF-8&quot;);_newlinets.InvokeMethod(&quot;Convert&quot;, fo, tso);_newlineOutputs.SetValue(tso.GetValue());_newline}_newline"
 Program_spcLanguage="JS"
 Name="srvrmgr"
 Sequence="20"
></Business_spcService_spcScript
></Business_spcService
>
